//TODO think about timestamp

use std::net::{
    SocketAddr,
};
use std::collections::HashMap;

fn channel(event: &[u8;4]) -> usize {
    (  1*(event[0] & 0x01)
     + 2*(event[0] & 0x02)
     + 4*(event[0] & 0x04)
     + 8*(event[0] & 0x08)) as usize
}

fn status(event: &[u8;4]) -> u8 {
    event[0]/16
}

fn pitch(event: &[u8;4]) -> u8 {
    event[1]
}

fn note(event: &[u8;4]) -> NoteState {
    NoteState {
        on: event[0] & 0x10 != 0,
        velocity: event[2],
        timestamp: event[3],
    }
}

fn controller_nbr(event: &[u8;4]) -> u8 {
    event[1]
}

fn controller_val(event: &[u8;4]) -> u8 {
    event[2]
}

#[derive(Serialize,Deserialize,Debug)]
struct NoteState {
    pub on: bool,
    pub velocity: u8,
    pub timestamp: u8,
}

#[derive(Serialize,Deserialize,Debug)]
struct ChannelState {
    pub instrument: u8,
    pub controllers: HashMap<u8,u8>,
    pub notes: HashMap<u8,NoteState>,
}

impl ChannelState {
    fn new() -> ChannelState {
        ChannelState {
            instrument: 0,
            controllers: HashMap::new(),
            notes: HashMap::new(),
        }
    }

    fn modify(&mut self, event: &[u8;4]) {
        match status(event) {
            0b1001 | 0b1000 => {
                let pitch = pitch(event);
                let note = note(event);
                self.notes.remove(&pitch);
                self.notes.insert(pitch,note);
            },
            0b1100 => self.instrument = event[1],
            0b1011 => {
                let controller_nbr = controller_nbr(event);
                let controller_val = controller_val(event);
                self.controllers.remove(&controller_nbr);
                self.controllers.insert(controller_nbr,controller_val);
            }
            _ => println!("midi event uncaught: {:?}",event),
        }

    }
}

#[derive(Serialize,Deserialize,Debug)]
pub struct MidiState {
    channels: [ChannelState;16],
}

impl MidiState {
    pub fn new() -> MidiState {
        let channels = [
            ChannelState::new(),
            ChannelState::new(),
            ChannelState::new(),
            ChannelState::new(),
            ChannelState::new(),
            ChannelState::new(),
            ChannelState::new(),
            ChannelState::new(),
            ChannelState::new(),
            ChannelState::new(),
            ChannelState::new(),
            ChannelState::new(),
            ChannelState::new(),
            ChannelState::new(),
            ChannelState::new(),
            ChannelState::new()];

        MidiState {
            channels: channels,
        }
    }

    pub fn modify(&mut self, event: &[u8;4]) {
        self.channels[channel(event)].modify(event)
    }
}

#[derive(Serialize,Deserialize,Debug,Clone)]
pub enum ServerMsg {
    NewPeerList(Vec<SocketAddr>),
}

#[derive(Serialize,Deserialize,Debug,Clone)]
pub enum ClientMsg {
    NewPeer(SocketAddr),
}

