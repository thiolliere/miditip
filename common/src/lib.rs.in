use std::net::{
    SocketAddr,
    TcpStream,
};
use std::io;
use std::io::{
    Write,
    Read,
};
use serde::ser::Serialize;
use serde::de::Deserialize;
use serde_json::error::Error as SerdeJsonError;
use lzma::error::LzmaError;
use lzma::{
    compress,
    decompress,
};

#[derive(Serialize,Deserialize,Debug,Clone)]
pub struct MiditipEvent {
    pub status: u8,
    pub data1: u8,
    pub data2: u8,
    pub peer_id: u8,
    pub msg_id: u8,
}

impl MiditipEvent {
    fn channel(&self) -> usize {
        (self.status & 0x0F) as usize
    }

    fn opcode(&self) -> u8 {
        self.status / 16
    }

    fn note(&self) -> Note {
        Note {
            on: self.status & 0x10 != 0,
            pitch: self.data1,
            velocity: self.data2,
        }
    }

    pub fn from_array(e: &[u8;5]) -> MiditipEvent {
        MiditipEvent {
            status: e[0],
            data1: e[1],
            data2: e[2],
            peer_id: e[3],
            msg_id: e[4],
        }
    }

    pub fn to_array(&self) -> [u8;5] {
        [self.status,self.data1,self.data2,self.peer_id,self.msg_id]
    }
}

#[derive(Serialize,Deserialize,Debug,Clone,PartialEq,Eq)]
struct Note {
    pub on: bool,
    pub pitch: u8,
    pub velocity: u8,
}

#[derive(Serialize,Deserialize,Debug,Clone)]
struct Channel {
    pub id: u8,
    pub instrument: u8,
    pub controllers: Vec<(u8,u8)>,
    pub notes: Vec<Note>,
}

impl Channel {
    fn new(id: u8) -> Channel {
        Channel {
            id: id,
            instrument: 0,
            controllers: Vec::new(),
            notes: Vec::new(),
        }
    }

    fn modify(&mut self, event: &MiditipEvent) {
        match event.opcode() {
            0b1001 => {
                let event_note = event.note();
                self.notes.retain(|note| note.pitch != event_note.pitch);
                self.notes.push(event_note);
            },
            0b1000 => self.notes.retain(|note| note.pitch != event.note().pitch),
            0b1100 => self.instrument = event.data1,
            0b1011 => {
                let controller_nbr = event.data1;
                let controller_val = event.data2;
                self.controllers.retain(|&(nbr,_)| nbr != controller_nbr);
                self.controllers.push((controller_nbr,controller_val));
            }
            _ => println!("midi event uncaught: {:?}",event),
        }

    }

    fn resolve(&self, other: &Channel) -> Vec<[u8;3]> {
        let mut msgs = Vec::new();
        if self.instrument != other.instrument {
            msgs.push([
                      0b1100_0000 | self.id,
                      other.instrument,
                      0,
            ]);
        }

        for &(id,val) in &self.controllers {
            match other.controllers.iter().find(|&&(other_id,_)| other_id == id) {
                Some(&(_,other_val)) => {
                    if other_val != val {
                        msgs.push([
                                  0b1011_0000 | self.id,
                                  id,
                                  other_val
                        ]);
                    }
                },
                None => {
                    //TODO is 0 the default value of controllers ?
                    msgs.push([
                              0b1011_0000 | self.id,
                              id,
                              0
                    ])
                }
            }
        }
        for &(id,val) in &other.controllers {
            if self.controllers.iter().find(|&&(cid,_)| cid == id).is_none() {
                msgs.push([
                          0b1011_0000 | self.id,
                          id,
                          val
                ]);
            }
        }

        for note in &self.notes {
            match other.notes.iter().find(|other_note| other_note.pitch == note.pitch) {
                Some(other_note) => {
                    if other_note != note {
                        let status = if other_note.on {
                            0b1001_0000 | self.id
                        } else {
                            0b1000_0000 | self.id
                        };
                        msgs.push([
                                  status,
                                  other_note.pitch,
                                  other_note.velocity
                        ]);
                    }
                },
                None => {
                    msgs.push([
                              0b1001_0000 | self.id,
                              note.pitch,
                              0
                    ]);
                }
            }
        }
        for other_note in &other.notes {
            if self.notes.iter().find(|note| note.pitch != other_note.pitch).is_none() {
                let status = if other_note.on {
                    0b1001_0000 | self.id
                } else {
                    0b1000_0000 | self.id
                };
                msgs.push([
                          status,
                          other_note.pitch,
                          other_note.velocity
                ]);
            }
        }

        msgs
    }
}

#[derive(Serialize,Deserialize,Debug,Clone)]
pub struct MiditipState {
    channels: Vec<Channel>,
    peers: Vec<(u8,u8)>,
}

impl MiditipState {
    pub fn new() -> MiditipState {
        let mut channels = Vec::with_capacity(16);
        for i in 0..16 {
            channels.push(Channel::new(i));
        }

        MiditipState {
            channels: channels,
            peers: Vec::new(),
        }
    }

    /// return whereas the event have modified the state,
    /// it doesn't modify the state if the message id is superior and to
    /// far in the futur or inferior and not far enough in the past
    ///
    /// farness is 128
    pub fn modify(&mut self, event: &MiditipEvent) -> bool {
        if let Some(&(_,peer_msg_id)) = self.peers.iter().find(|(id,_) id == event.peer_id) {
            let modify = if peer_msg_id == event.msg_id {
                false
            } else if peer_msg_id > event.msg_id {
                peer_msg_id - event.msg_id > 128
            } else {
                event.msg_id - peer_msg_id < 128
            };

            if modify {
                self.peers.retain(|(id,_)| id != event.peer_id);
            } else {
                return false;
            }
        }
        self.peers.push((event.peer_id,event.msg_id));
        self.channels[event.channel()].modify(&event);
        true
    }

    pub fn resolve(&self, other: &MiditipState) -> Vec<[u8;3]> {
        let mut msgs = Vec::new();
        for i in 0..16 {
            let mut res = self.channels[i].resolve(&other.channels[i]);
            msgs.append(&mut res);
        }
        msgs
    }
}

#[derive(Serialize,Deserialize,Debug,Clone)]
pub enum ServerInitMsg {
    PeerId(u8),
}

#[derive(Serialize,Deserialize,Debug,Clone)]
pub enum ClientInitMsg {
    NewPeer(u16),
}

#[derive(Serialize,Deserialize,Debug,Clone)]
pub enum ServerMsg {
    NewPeerList(Vec<SocketAddr>),
    MiditipState(MiditipState),
}

#[derive(Serialize,Deserialize,Debug,Clone)]
pub enum ClientMsg {
    MiditipEvent(MiditipEvent),
}

const PRESET: u32 = lzma::EXTREME_PRESET;

pub enum CommonError {
    SerdeJson(SerdeJsonError),
    Lzma(LzmaError),
}

impl From<LzmaError> for CommonError {
    fn from(e: LzmaError) -> CommonError {
        CommonError::Lzma(e)
    }
}
impl From<SerdeJsonError> for CommonError {
    fn from(e: SerdeJsonError) -> CommonError {
        CommonError::SerdeJson(e)
    }
}

pub fn encode<T: Serialize>(msg: &T) -> Result<Vec<u8>,CommonError> {
    let mut code = try!(compress(&*try!(serde_json::to_vec(msg)), PRESET));
    let len = code.len();
    let mut res = vec![(len / 256) as u8, len as u8];
    res.append(&mut code);
    Ok(res)
}

pub fn decode_size(size: &[u8;2]) -> usize {
    size[0] as usize * 256 + size[1] as usize
}

pub fn decode_msg<T: Deserialize>(code: &[u8]) -> Result<T,CommonError> {
    Ok(try!(serde_json::from_slice(&*try!(decompress(code)))))
}

pub fn send<T: Serialize>(msg: &T, stream: &mut TcpStream) -> io::Result<()> {
    match encode(msg) {
        Ok(vector) => stream.write_all(&*vector),
        Err(e) => match e {
            CommonError::SerdeJson(e) => Err(io::Error::new(io::ErrorKind::Other,e)),
            CommonError::Lzma(e) => Err(io::Error::new(io::ErrorKind::Other,e)),
        }
    }
}

pub fn recv<T: Deserialize>(buffer: &mut[u8], stream: &mut TcpStream) -> io::Result<T> {
    let mut size_buffer = [0u8;2];
    try!(stream.read_exact(&mut size_buffer));
    let size = decode_size(&size_buffer);
    if size > buffer.len() {
        return Err(io::Error::new(io::ErrorKind::Other,"FullBuffer"));
    }
    let (msg_buffer,_) = buffer.split_at_mut(size);
    try!(stream.read_exact(msg_buffer));
    match decode_msg(&msg_buffer) {
        Ok(t) => Ok(t),
        Err(e) => match e {
            CommonError::SerdeJson(e) => Err(io::Error::new(io::ErrorKind::Other,e)),
            CommonError::Lzma(e) => Err(io::Error::new(io::ErrorKind::Other,e)),
        }
    }
}

